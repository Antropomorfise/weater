{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWeather","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","hours","url","api_url","data","wrap","_context","prev","next","preventDefault","state","concat","city","fetch","sent","json","id","setState","city_name","temp_c","app_temp","location","name","current","setItemsToLocalStorage","stop","_x","apply","arguments","onChangeRadio","defineProperty","target","value","Date","getHours","undefined","localStorage","getItem","getCity","checkTimeFromStorage","_this2","axios","get","then","response","_this$state","setItem","removeItem","react_default","createElement","Container","MyButton","onClick","Radio","checked","onChange","renderTemp","Component","styled","Button","background","border","borderRadius","boxShadow","color","height","padding","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6aace442.chunk.js","sourcesContent":["import React, { Component } from \"react\"; \nimport axios from 'axios'; \nimport Button from '@material-ui/core/Button' \nimport Container from '@material-ui/core/Container'; \nimport Radio from '@material-ui/core/Radio' \nimport { styled } from '@material-ui/styles'; \n\nclass App extends Component { \n\n  constructor(props){ \n  super(props) \n    this.state = { \n      id: \"1\", \n      hours: new Date().getHours(), \n      data: { \n        city: undefined, \n        temp_c: null, \n     }}; \n    } \n\n  componentWillMount() { \n\n  const city = localStorage.getItem('city'); \n  const temp_c = localStorage.getItem('temp_c'); \n\n  if(city === undefined){ \n    this.setState({ city, temp_c }); \n  } else { \n    this.getCity(); \n    this.setState({ city, temp_c }); \n  } \n    this.checkTimeFromStorage(); \n  } \n\n  //Получаем город \n  getCity() { \n    axios \n    .get('https://ipinfo.io') \n    .then(response => { \n      this.setState({ data: response.data }); \n    }); \n  } \n\n  //получаем погоду для города с помощью state.id \n  getWeather = async (event) => { \n  event.preventDefault(); \n\n  const {hours} = this.state \n\n  var url = `https://api.weatherbit.io/v2.0/current?city=${this.state.data.city}&key=1f17cabc0951462bae7a851e31772cd4` \n  var api_url = await fetch(url); \n  var data = await api_url.json(); \n\n  if(this.state.id === \"1\") { \n    this.setState({ \n      city: data.data[0].city_name, \n      temp_c: data.data[0].app_temp, \n      hours: hours }) \n  } else { \n\n    url = `https://api.apixu.com/v1/current.json?key=e9b0b0d0b5074b3388f195304190606&q=${this.state.data.city}` \n    api_url = await fetch(url); \n    data = await api_url.json(); \n\n  this.setState({ \n    city: data.location.name, \n    temp_c: data.current.temp_c, \n    hours: hours, \n  }) \n} \n    this.setItemsToLocalStorage(); \n  } \n\n  setItemsToLocalStorage() { \n    const { hours, city, temp_c } = this.state \n    localStorage.setItem('city', city); \n    localStorage.setItem('temp_c', temp_c); \n    localStorage.setItem('hours', hours); \n  }; \n\n  checkTimeFromStorage() { \n    const { hours } = this.state \n  if( this.state.hours > hours + 2 ) { \n    const city = localStorage.removeItem('city'); \n    const temp_c = localStorage.removeItem('temp_c'); \n    const hours = localStorage.removeItem('hours'); \n    this.setState({ city, hours, temp_c }); \n  } \n} \n\n  renderTemp(){ \n    if(this.state.temp_c !== null){ \n      return <p>Температура: {this.state.temp_c}</p> \n    } else { return; } \n  } \n\n  onChangeRadio = (event) => { \n    this.setState({ \n      [event.target.name]: event.target.value \n    }) \n  } \n\n  render() { \n    return ( \n      <Container> \n        <h1>Город:{this.state.data.city}</h1> \n\n        <MyButton onClick={this.getWeather}> \n        Узнать погоду от: \n        </MyButton><br/> \n\n        <Radio \n        name=\"id\" \n        value=\"1\" \n        checked={this.state.id === \"1\"} \n        onChange={this.onChangeRadio} \n        /> Weatherbit <br/> \n\n        <Radio \n        name=\"id\" \n        value=\"2\" \n        checked={this.state.id === \"2\"} \n        onChange={this.onChangeRadio} \n        /> Apixy <br/> \n        \n        {this.renderTemp()} \n      </Container>\n    ); \n  } \n} \n\nexport default App;\n\nconst MyButton = styled(Button)({ \nbackground: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)', \nborder: 0, \nborderRadius: 19, \nboxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)', \ncolor: 'white', \nheight: 48, \npadding: '0 30px', \n}); \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}